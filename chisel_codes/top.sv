// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module tile(	// src/main/scala/tile.scala:9:7
  input         clock,	// src/main/scala/tile.scala:9:7
                reset,	// src/main/scala/tile.scala:9:7
  output        io_rd_en_aeq_i,	// src/main/scala/tile.scala:10:16
  output [8:0]  io_rd_addr_aeq_i,	// src/main/scala/tile.scala:10:16
  input  [10:0] io_rd_data_aeq_i,	// src/main/scala/tile.scala:10:16
  input         io_thresh_en,	// src/main/scala/tile.scala:10:16
                io_conv_en,	// src/main/scala/tile.scala:10:16
  output        io_conv_done,	// src/main/scala/tile.scala:10:16
                io_thresh_done	// src/main/scala/tile.scala:10:16
);

  reg        conv_done_reg;	// src/main/scala/tile.scala:132:32
  reg        thresh_done_reg;	// src/main/scala/tile.scala:133:34
  reg  [7:0] read_counter;	// src/main/scala/tile.scala:143:31
  wire       io_rd_en_aeq_i_0 = io_conv_en & ~conv_done_reg;	// src/main/scala/tile.scala:132:32, :144:{36,39}
  reg  [4:0] read_mem_counter;	// src/main/scala/chisel3/util/Counter.scala:61:40
  always @(posedge clock) begin	// src/main/scala/tile.scala:9:7
    if (reset) begin	// src/main/scala/tile.scala:9:7
      conv_done_reg <= 1'h0;	// src/main/scala/tile.scala:78:20, :132:32
      thresh_done_reg <= 1'h0;	// src/main/scala/tile.scala:78:20, :133:34
      read_counter <= 8'h0;	// src/main/scala/tile.scala:86:38, :143:31
      read_mem_counter <= 5'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
    end
    else begin	// src/main/scala/tile.scala:9:7
      automatic logic _GEN;	// src/main/scala/tile.scala:176:30
      automatic logic _GEN_0 = io_thresh_en & ~io_conv_en;	// src/main/scala/tile.scala:298:{57,60}
      automatic logic wrap_wrap;	// src/main/scala/chisel3/util/Counter.scala:73:24
      _GEN = io_rd_data_aeq_i[10] | ~(io_rd_data_aeq_i[0]);	// src/main/scala/tile.scala:150:{25,44}, :176:{30,33}
      wrap_wrap = read_mem_counter == 5'h11;	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
      conv_done_reg <= io_rd_en_aeq_i_0 & _GEN | conv_done_reg;	// src/main/scala/tile.scala:132:32, :144:{36,55}, :176:{30,50}, :178:27
      thresh_done_reg <= _GEN_0 & wrap_wrap;	// src/main/scala/chisel3/util/Counter.scala:73:24, :117:24, :118:{16,23}, src/main/scala/tile.scala:133:34, :298:57
      if (io_rd_en_aeq_i_0) begin	// src/main/scala/tile.scala:144:36
        if (_GEN)	// src/main/scala/tile.scala:176:30
          read_counter <= 8'h0;	// src/main/scala/tile.scala:86:38, :143:31
        else	// src/main/scala/tile.scala:176:30
          read_counter <= read_counter + 8'h1;	// src/main/scala/tile.scala:143:31, :175:38
      end
      if (_GEN_0) begin	// src/main/scala/tile.scala:298:57
        if (wrap_wrap)	// src/main/scala/chisel3/util/Counter.scala:73:24
          read_mem_counter <= 5'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
        else	// src/main/scala/chisel3/util/Counter.scala:73:24
          read_mem_counter <= read_mem_counter + 5'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      end
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/tile.scala:9:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/tile.scala:9:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/tile.scala:9:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/tile.scala:9:7
      automatic logic [31:0] _RANDOM[0:10];	// src/main/scala/tile.scala:9:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/tile.scala:9:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/tile.scala:9:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/tile.scala:9:7
        for (logic [3:0] i = 4'h0; i < 4'hB; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;	// src/main/scala/tile.scala:9:7
        end	// src/main/scala/tile.scala:9:7
        conv_done_reg = _RANDOM[4'h9][31];	// src/main/scala/tile.scala:9:7, :132:32
        thresh_done_reg = _RANDOM[4'hA][0];	// src/main/scala/tile.scala:9:7, :133:34
        read_counter = _RANDOM[4'hA][8:1];	// src/main/scala/tile.scala:9:7, :133:34, :143:31
        read_mem_counter = _RANDOM[4'hA][14:10];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/tile.scala:9:7, :133:34
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/tile.scala:9:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/tile.scala:9:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_rd_en_aeq_i = io_rd_en_aeq_i_0;	// src/main/scala/tile.scala:9:7, :144:36
  assign io_rd_addr_aeq_i = io_rd_en_aeq_i_0 ? {1'h0, read_counter} : 9'h0;	// src/main/scala/tile.scala:9:7, :78:20, :79:22, :87:38, :143:31, :144:{36,55}, :146:26
  assign io_conv_done = conv_done_reg;	// src/main/scala/tile.scala:9:7, :132:32
  assign io_thresh_done = thresh_done_reg;	// src/main/scala/tile.scala:9:7, :133:34
endmodule

// VCS coverage exclude_file
module mem_256x11(	// src/main/scala/sync_mem.scala:26:23
  input  [7:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [10:0] R0_data
);

  reg [10:0] Memory[0:255];	// src/main/scala/sync_mem.scala:26:23
  reg        _R0_en_d0;	// src/main/scala/sync_mem.scala:26:23
  reg [7:0]  _R0_addr_d0;	// src/main/scala/sync_mem.scala:26:23
  always @(posedge R0_clk) begin	// src/main/scala/sync_mem.scala:26:23
    _R0_en_d0 <= R0_en;	// src/main/scala/sync_mem.scala:26:23
    _R0_addr_d0 <= R0_addr;	// src/main/scala/sync_mem.scala:26:23
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// src/main/scala/sync_mem.scala:26:23
    `ifdef RANDOMIZE_REG_INIT	// src/main/scala/sync_mem.scala:26:23
      reg [31:0] _RANDOM;	// src/main/scala/sync_mem.scala:26:23
    `endif // RANDOMIZE_REG_INIT
    reg [31:0] _RANDOM_MEM;	// src/main/scala/sync_mem.scala:26:23
    initial begin	// src/main/scala/sync_mem.scala:26:23
      `INIT_RANDOM_PROLOG_	// src/main/scala/sync_mem.scala:26:23
      `ifdef RANDOMIZE_MEM_INIT	// src/main/scala/sync_mem.scala:26:23
        for (logic [8:0] i = 9'h0; i < 9'h100; i += 9'h1) begin
          _RANDOM_MEM = `RANDOM;	// src/main/scala/sync_mem.scala:26:23
          Memory[i[7:0]] = _RANDOM_MEM[10:0];	// src/main/scala/sync_mem.scala:26:23
        end	// src/main/scala/sync_mem.scala:26:23
      `endif // RANDOMIZE_MEM_INIT
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/sync_mem.scala:26:23
        _RANDOM = {`RANDOM};	// src/main/scala/sync_mem.scala:26:23
        _R0_en_d0 = _RANDOM[0];	// src/main/scala/sync_mem.scala:26:23
        _R0_addr_d0 = _RANDOM[8:1];	// src/main/scala/sync_mem.scala:26:23
      `endif // RANDOMIZE_REG_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 11'bx;	// src/main/scala/sync_mem.scala:26:23
endmodule

module mem_24(	// src/main/scala/sync_mem.scala:17:8
  input         clock,	// src/main/scala/sync_mem.scala:17:8
  input  [7:0]  io_rd_addr,	// src/main/scala/sync_mem.scala:18:13
  output [10:0] io_rd_data,	// src/main/scala/sync_mem.scala:18:13
  input         io_rd_en	// src/main/scala/sync_mem.scala:18:13
);

  mem_256x11 mem_ext (	// src/main/scala/sync_mem.scala:26:23
    .R0_addr (io_rd_addr),
    .R0_en   (io_rd_en),
    .R0_clk  (clock),
    .R0_data (io_rd_data)
  );
endmodule

module Top(	// src/main/scala/top.scala:6:7
  input        clock,	// src/main/scala/top.scala:6:7
               reset,	// src/main/scala/top.scala:6:7
               io_t_conv_en,	// src/main/scala/top.scala:7:16
               io_t_thresh_en,	// src/main/scala/top.scala:7:16
  input  [7:0] io_t_kernel_0,	// src/main/scala/top.scala:7:16
               io_t_kernel_1,	// src/main/scala/top.scala:7:16
               io_t_kernel_2,	// src/main/scala/top.scala:7:16
               io_t_kernel_3,	// src/main/scala/top.scala:7:16
               io_t_kernel_4,	// src/main/scala/top.scala:7:16
               io_t_kernel_5,	// src/main/scala/top.scala:7:16
               io_t_kernel_6,	// src/main/scala/top.scala:7:16
               io_t_kernel_7,	// src/main/scala/top.scala:7:16
               io_t_kernel_8,	// src/main/scala/top.scala:7:16
               io_t_bias_0,	// src/main/scala/top.scala:7:16
               io_t_bias_1,	// src/main/scala/top.scala:7:16
               io_t_bias_2,	// src/main/scala/top.scala:7:16
               io_t_bias_3,	// src/main/scala/top.scala:7:16
               io_t_bias_4,	// src/main/scala/top.scala:7:16
               io_t_bias_5,	// src/main/scala/top.scala:7:16
               io_t_bias_6,	// src/main/scala/top.scala:7:16
               io_t_bias_7,	// src/main/scala/top.scala:7:16
               io_t_bias_8,	// src/main/scala/top.scala:7:16
  output       io_t_conv_done,	// src/main/scala/top.scala:7:16
               io_t_thresh_done	// src/main/scala/top.scala:7:16
);

  wire [10:0] _in_aeq_2_io_rd_data;	// src/main/scala/top.scala:29:27
  wire [10:0] _in_aeq_1_io_rd_data;	// src/main/scala/top.scala:27:27
  wire        _tile2_io_rd_en_aeq_i;	// src/main/scala/top.scala:19:24
  wire [8:0]  _tile2_io_rd_addr_aeq_i;	// src/main/scala/top.scala:19:24
  wire        _tile2_io_conv_done;	// src/main/scala/top.scala:19:24
  wire        _tile2_io_thresh_done;	// src/main/scala/top.scala:19:24
  wire        _tile1_io_rd_en_aeq_i;	// src/main/scala/top.scala:18:23
  wire [8:0]  _tile1_io_rd_addr_aeq_i;	// src/main/scala/top.scala:18:23
  wire        _tile1_io_conv_done;	// src/main/scala/top.scala:18:23
  wire        _tile1_io_thresh_done;	// src/main/scala/top.scala:18:23
  wire        _GEN = io_t_conv_en & ~io_t_thresh_en;	// src/main/scala/top.scala:130:{23,26}
  wire        _GEN_0 = io_t_thresh_en & ~io_t_conv_en;	// src/main/scala/top.scala:138:{25,28}
  tile tile1 (	// src/main/scala/top.scala:18:23
    .clock            (clock),
    .reset            (reset),
    .io_rd_en_aeq_i   (_tile1_io_rd_en_aeq_i),
    .io_rd_addr_aeq_i (_tile1_io_rd_addr_aeq_i),
    .io_rd_data_aeq_i (_in_aeq_1_io_rd_data),	// src/main/scala/top.scala:27:27
    .io_thresh_en     (_GEN_0),	// src/main/scala/top.scala:138:25
    .io_conv_en       (_GEN),	// src/main/scala/top.scala:130:23
    .io_conv_done     (_tile1_io_conv_done),
    .io_thresh_done   (_tile1_io_thresh_done)
  );
  tile tile2 (	// src/main/scala/top.scala:19:24
    .clock            (clock),
    .reset            (reset),
    .io_rd_en_aeq_i   (_tile2_io_rd_en_aeq_i),
    .io_rd_addr_aeq_i (_tile2_io_rd_addr_aeq_i),
    .io_rd_data_aeq_i (_in_aeq_2_io_rd_data),	// src/main/scala/top.scala:29:27
    .io_thresh_en     (_GEN_0),	// src/main/scala/top.scala:138:25
    .io_conv_en       (_GEN),	// src/main/scala/top.scala:130:23
    .io_conv_done     (_tile2_io_conv_done),
    .io_thresh_done   (_tile2_io_thresh_done)
  );
  mem_24 in_aeq_1 (	// src/main/scala/top.scala:27:27
    .clock      (clock),
    .io_rd_addr (_tile1_io_rd_addr_aeq_i[7:0]),	// src/main/scala/top.scala:18:23, :56:25
    .io_rd_data (_in_aeq_1_io_rd_data),
    .io_rd_en   (_tile1_io_rd_en_aeq_i)	// src/main/scala/top.scala:18:23
  );
  mem_24 in_aeq_2 (	// src/main/scala/top.scala:29:27
    .clock      (clock),
    .io_rd_addr (_tile2_io_rd_addr_aeq_i[7:0]),	// src/main/scala/top.scala:19:24, :75:25
    .io_rd_data (_in_aeq_2_io_rd_data),
    .io_rd_en   (_tile2_io_rd_en_aeq_i)	// src/main/scala/top.scala:19:24
  );
  assign io_t_conv_done = _tile1_io_conv_done & _tile2_io_conv_done;	// src/main/scala/top.scala:6:7, :18:23, :19:24, :147:42
  assign io_t_thresh_done = _tile1_io_thresh_done & _tile2_io_thresh_done;	// src/main/scala/top.scala:6:7, :18:23, :19:24, :146:46
endmodule

