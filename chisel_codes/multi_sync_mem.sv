// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// VCS coverage exclude_file
module mems_256x11(	// src/main/scala/multi_sync_mem.scala:27:47
  input  [7:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [10:0] R0_data,
  input  [7:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [10:0] W0_data
);

  reg [10:0] Memory[0:255];	// src/main/scala/multi_sync_mem.scala:27:47
  reg        _R0_en_d0;	// src/main/scala/multi_sync_mem.scala:27:47
  reg [7:0]  _R0_addr_d0;	// src/main/scala/multi_sync_mem.scala:27:47
  always @(posedge R0_clk) begin	// src/main/scala/multi_sync_mem.scala:27:47
    _R0_en_d0 <= R0_en;	// src/main/scala/multi_sync_mem.scala:27:47
    _R0_addr_d0 <= R0_addr;	// src/main/scala/multi_sync_mem.scala:27:47
  end // always @(posedge)
  always @(posedge W0_clk) begin	// src/main/scala/multi_sync_mem.scala:27:47
    if (W0_en & 1'h1)	// src/main/scala/multi_sync_mem.scala:27:47
      Memory[W0_addr] <= W0_data;	// src/main/scala/multi_sync_mem.scala:27:47
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// src/main/scala/multi_sync_mem.scala:27:47
    `ifdef RANDOMIZE_REG_INIT	// src/main/scala/multi_sync_mem.scala:27:47
      reg [31:0] _RANDOM;	// src/main/scala/multi_sync_mem.scala:27:47
    `endif // RANDOMIZE_REG_INIT
    reg [31:0] _RANDOM_MEM;	// src/main/scala/multi_sync_mem.scala:27:47
    initial begin	// src/main/scala/multi_sync_mem.scala:27:47
      `INIT_RANDOM_PROLOG_	// src/main/scala/multi_sync_mem.scala:27:47
      `ifdef RANDOMIZE_MEM_INIT	// src/main/scala/multi_sync_mem.scala:27:47
        for (logic [8:0] i = 9'h0; i < 9'h100; i += 9'h1) begin
          _RANDOM_MEM = `RANDOM;	// src/main/scala/multi_sync_mem.scala:27:47
          Memory[i[7:0]] = _RANDOM_MEM[10:0];	// src/main/scala/multi_sync_mem.scala:27:47
        end	// src/main/scala/multi_sync_mem.scala:27:47
      `endif // RANDOMIZE_MEM_INIT
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/multi_sync_mem.scala:27:47
        _RANDOM = {`RANDOM};	// src/main/scala/multi_sync_mem.scala:27:47
        _R0_en_d0 = _RANDOM[0];	// src/main/scala/multi_sync_mem.scala:27:47
        _R0_addr_d0 = _RANDOM[8:1];	// src/main/scala/multi_sync_mem.scala:27:47
      `endif // RANDOMIZE_REG_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 11'bx;	// src/main/scala/multi_sync_mem.scala:27:47
endmodule

module MultiMemory(	// src/main/scala/multi_sync_mem.scala:16:7
  input         clock,	// src/main/scala/multi_sync_mem.scala:16:7
                reset,	// src/main/scala/multi_sync_mem.scala:16:7
  input  [7:0]  io_rdAddr,	// src/main/scala/multi_sync_mem.scala:17:14
  output [10:0] io_rdData_0,	// src/main/scala/multi_sync_mem.scala:17:14
                io_rdData_1,	// src/main/scala/multi_sync_mem.scala:17:14
                io_rdData_2,	// src/main/scala/multi_sync_mem.scala:17:14
                io_rdData_3,	// src/main/scala/multi_sync_mem.scala:17:14
                io_rdData_4,	// src/main/scala/multi_sync_mem.scala:17:14
                io_rdData_5,	// src/main/scala/multi_sync_mem.scala:17:14
                io_rdData_6,	// src/main/scala/multi_sync_mem.scala:17:14
                io_rdData_7,	// src/main/scala/multi_sync_mem.scala:17:14
                io_rdData_8,	// src/main/scala/multi_sync_mem.scala:17:14
  input  [7:0]  io_wrAddr,	// src/main/scala/multi_sync_mem.scala:17:14
  input  [10:0] io_wrData_0,	// src/main/scala/multi_sync_mem.scala:17:14
                io_wrData_1,	// src/main/scala/multi_sync_mem.scala:17:14
                io_wrData_2,	// src/main/scala/multi_sync_mem.scala:17:14
                io_wrData_3,	// src/main/scala/multi_sync_mem.scala:17:14
                io_wrData_4,	// src/main/scala/multi_sync_mem.scala:17:14
                io_wrData_5,	// src/main/scala/multi_sync_mem.scala:17:14
                io_wrData_6,	// src/main/scala/multi_sync_mem.scala:17:14
                io_wrData_7,	// src/main/scala/multi_sync_mem.scala:17:14
                io_wrData_8,	// src/main/scala/multi_sync_mem.scala:17:14
  input         io_wrEna_0,	// src/main/scala/multi_sync_mem.scala:17:14
                io_wrEna_1,	// src/main/scala/multi_sync_mem.scala:17:14
                io_wrEna_2,	// src/main/scala/multi_sync_mem.scala:17:14
                io_wrEna_3,	// src/main/scala/multi_sync_mem.scala:17:14
                io_wrEna_4,	// src/main/scala/multi_sync_mem.scala:17:14
                io_wrEna_5,	// src/main/scala/multi_sync_mem.scala:17:14
                io_wrEna_6,	// src/main/scala/multi_sync_mem.scala:17:14
                io_wrEna_7,	// src/main/scala/multi_sync_mem.scala:17:14
                io_wrEna_8,	// src/main/scala/multi_sync_mem.scala:17:14
                io_rdEna_0,	// src/main/scala/multi_sync_mem.scala:17:14
                io_rdEna_1,	// src/main/scala/multi_sync_mem.scala:17:14
                io_rdEna_2,	// src/main/scala/multi_sync_mem.scala:17:14
                io_rdEna_3,	// src/main/scala/multi_sync_mem.scala:17:14
                io_rdEna_4,	// src/main/scala/multi_sync_mem.scala:17:14
                io_rdEna_5,	// src/main/scala/multi_sync_mem.scala:17:14
                io_rdEna_6,	// src/main/scala/multi_sync_mem.scala:17:14
                io_rdEna_7,	// src/main/scala/multi_sync_mem.scala:17:14
                io_rdEna_8	// src/main/scala/multi_sync_mem.scala:17:14
);

  mems_256x11 mems_0_ext (	// src/main/scala/multi_sync_mem.scala:27:47
    .R0_addr (io_rdAddr),
    .R0_en   (io_rdEna_0),
    .R0_clk  (clock),
    .R0_data (io_rdData_0),
    .W0_addr (io_wrAddr),
    .W0_en   (io_wrEna_0),
    .W0_clk  (clock),
    .W0_data (io_wrData_0)
  );
  mems_256x11 mems_1_ext (	// src/main/scala/multi_sync_mem.scala:27:47
    .R0_addr (io_rdAddr),
    .R0_en   (io_rdEna_1),
    .R0_clk  (clock),
    .R0_data (io_rdData_1),
    .W0_addr (io_wrAddr),
    .W0_en   (io_wrEna_1),
    .W0_clk  (clock),
    .W0_data (io_wrData_1)
  );
  mems_256x11 mems_2_ext (	// src/main/scala/multi_sync_mem.scala:27:47
    .R0_addr (io_rdAddr),
    .R0_en   (io_rdEna_2),
    .R0_clk  (clock),
    .R0_data (io_rdData_2),
    .W0_addr (io_wrAddr),
    .W0_en   (io_wrEna_2),
    .W0_clk  (clock),
    .W0_data (io_wrData_2)
  );
  mems_256x11 mems_3_ext (	// src/main/scala/multi_sync_mem.scala:27:47
    .R0_addr (io_rdAddr),
    .R0_en   (io_rdEna_3),
    .R0_clk  (clock),
    .R0_data (io_rdData_3),
    .W0_addr (io_wrAddr),
    .W0_en   (io_wrEna_3),
    .W0_clk  (clock),
    .W0_data (io_wrData_3)
  );
  mems_256x11 mems_4_ext (	// src/main/scala/multi_sync_mem.scala:27:47
    .R0_addr (io_rdAddr),
    .R0_en   (io_rdEna_4),
    .R0_clk  (clock),
    .R0_data (io_rdData_4),
    .W0_addr (io_wrAddr),
    .W0_en   (io_wrEna_4),
    .W0_clk  (clock),
    .W0_data (io_wrData_4)
  );
  mems_256x11 mems_5_ext (	// src/main/scala/multi_sync_mem.scala:27:47
    .R0_addr (io_rdAddr),
    .R0_en   (io_rdEna_5),
    .R0_clk  (clock),
    .R0_data (io_rdData_5),
    .W0_addr (io_wrAddr),
    .W0_en   (io_wrEna_5),
    .W0_clk  (clock),
    .W0_data (io_wrData_5)
  );
  mems_256x11 mems_6_ext (	// src/main/scala/multi_sync_mem.scala:27:47
    .R0_addr (io_rdAddr),
    .R0_en   (io_rdEna_6),
    .R0_clk  (clock),
    .R0_data (io_rdData_6),
    .W0_addr (io_wrAddr),
    .W0_en   (io_wrEna_6),
    .W0_clk  (clock),
    .W0_data (io_wrData_6)
  );
  mems_256x11 mems_7_ext (	// src/main/scala/multi_sync_mem.scala:27:47
    .R0_addr (io_rdAddr),
    .R0_en   (io_rdEna_7),
    .R0_clk  (clock),
    .R0_data (io_rdData_7),
    .W0_addr (io_wrAddr),
    .W0_en   (io_wrEna_7),
    .W0_clk  (clock),
    .W0_data (io_wrData_7)
  );
  mems_256x11 mems_8_ext (	// src/main/scala/multi_sync_mem.scala:27:47
    .R0_addr (io_rdAddr),
    .R0_en   (io_rdEna_8),
    .R0_clk  (clock),
    .R0_data (io_rdData_8),
    .W0_addr (io_wrAddr),
    .W0_en   (io_wrEna_8),
    .W0_clk  (clock),
    .W0_data (io_wrData_8)
  );
endmodule

