// Generated by CIRCT firtool-1.62.0
// external module TDPB

module tdp_bram(	// src/main/scala/tdpBRAM.scala:6:7
  input         clock,	// src/main/scala/tdpBRAM.scala:6:7
                reset,	// src/main/scala/tdpBRAM.scala:6:7
                io_clka,	// src/main/scala/tdpBRAM.scala:7:14
                io_clkb,	// src/main/scala/tdpBRAM.scala:7:14
                io_ena,	// src/main/scala/tdpBRAM.scala:7:14
                io_enb,	// src/main/scala/tdpBRAM.scala:7:14
                io_wea,	// src/main/scala/tdpBRAM.scala:7:14
                io_web,	// src/main/scala/tdpBRAM.scala:7:14
  input  [9:0]  io_addra,	// src/main/scala/tdpBRAM.scala:7:14
                io_addrb,	// src/main/scala/tdpBRAM.scala:7:14
  input  [31:0] io_dia,	// src/main/scala/tdpBRAM.scala:7:14
                io_dib,	// src/main/scala/tdpBRAM.scala:7:14
  output [31:0] io_doa,	// src/main/scala/tdpBRAM.scala:7:14
                io_dob	// src/main/scala/tdpBRAM.scala:7:14
);

  TDPB #(
    .ADDR_WIDTH(10),
    .DATA_WIDTH(32),
    .INIT_FILE("hello")
  ) bram (	// src/main/scala/tdpBRAM.scala:22:20
    .clka  (io_clka),
    .clkb  (io_clkb),
    .ena   (io_ena),
    .enb   (io_enb),
    .wea   (io_wea),
    .web   (io_web),
    .addra (io_addra),
    .addrb (io_addrb),
    .dia   (io_dia),
    .dib   (io_dib),
    .doa   (io_doa),
    .dob   (io_dob)
  );
endmodule


// ----- 8< ----- FILE "./tdpBRAM.v" ----- 8< -----

module TrueDualPortBRAM #(
    parameter DATA_WIDTH = 16,
    parameter ADDR_WIDTH = 10,
    parameter INIT_FILE = ""
)(
    input                        clka, clkb,
    input                        ena, enb,
    input                        wea, web,
    input      [ADDR_WIDTH-1:0]  addra, addrb,
    input      [DATA_WIDTH-1:0]  dia, dib,
    output reg [DATA_WIDTH-1:0]  doa, dob
);

    reg [DATA_WIDTH-1:0] ram [(2**ADDR_WIDTH)-1:0];

    // Initialization block
    initial begin
        if (INIT_FILE != "") begin
            $readmemh(INIT_FILE, ram);
        end
    end

    always @(posedge clka) begin
        if (ena) begin
            if (wea)
                ram[addra] <= dia;
            doa <= ram[addra];
        end
    end

    always @(posedge clkb) begin
        if (enb) begin
            if (web)
                ram[addrb] <= dib;
            dob <= ram[addrb];
        end
    end

endmodule

// ----- 8< ----- FILE "firrtl_black_box_resource_files.f" ----- 8< -----

tdpBRAM.v
